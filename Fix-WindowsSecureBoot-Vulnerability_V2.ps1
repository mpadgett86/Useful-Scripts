$transcript_file = "C:\SecureBootLog.txt"
Start-Transcript $transcript_file


$affected = ([System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI db).bytes) -match 'Microsoft Corporation UEFI CA 2011')
$packageURL = "http://uefi.org/sites/default/files/resources/dbxupdate_x64.bin"
$DBXpath = "C:\dbxtemp"
$destination = "$DBXpath\dbxupdate_x64.bin"
$SaveExecutionPolicy = Get-ExecutionPolicy
cmd.exe /c "echo A | Powershell.exe Set-ExecutionPolicy Bypass -Scope Process -Force"





#########################################################################################
function SplitDbxAuthInfo {
    # Get file from script input
    #$file  = Get-Content -Encoding Byte $args[0]
    $file = $destination
write-host "$file"

    # Identify file signature
    $chop = $file[40..($file.Length - 1)]
    if (($chop[0] -ne 0x30) -or ($chop[1] -ne 0x82 )) {
        Write-Error "Cannot find signature"
        exit 1
    }

write-host "here 1"

    # Signature is known to be ASN size plus header of 4 bytes
    $sig_length = ($chop[2] * 256) + $chop[3] + 4
    $sig = $chop[0..($sig_length - 1)]

write-host "here 2"

    if ($sig_length -gt ($file.Length + 40)) {
        Write-Error "Signature longer than file size!"
        exit 1
    }

write-host "here 3"

    # Build and write signature output file
    [System.Byte[]] $sigbytes =  @()
    foreach ($i in $sig) {$sigbytes += $i}
    Set-Content -Encoding Byte -Path "$DBXpath\signature.p7" -Value $sigbytes
    Write-Output "Successfully created output file $DBXpath\signature.p7"

write-host "here 4"

    # Build and write variable content output file
    $content = $chop[$sig_length..($chop.Length - 1)]
    [System.Byte[]] $bytes =  @()
    foreach ($i in $content) {$bytes += $i}
    Set-Content -Encoding Byte -Path "$DBXpath\content.bin" -Value $bytes
    Write-Output "Successfully created output file $DBXpath\content.bin"

write-host "here 5"
}
#########################################################################################


function downloadDBX {

    if ((test-path $DBXpath) -eq $false) { 

        cmd.exe /c "mkdir $DBXpath"

    }

    #if (Get-Command 'Invoke-Webrequest') {
    try {
        Invoke-WebRequest $packageURL -OutFile "$DBXpath\"
    }
    catch {
        $WebClient = New-Object System.Net.WebClient
        $WebClient.DownloadFile($packageURL, $destination)
    }

}

function fix_SercureBoot {

    if ($affected -eq $true) {

        #Install-Script -Name SplitDbxContent
        #downloadDBX
        Start-Sleep -s 15

        SplitDbxAuthInfo “$DBXpath\dbxupdate_x64.bin”
        #SplitDbxAuthInfo

        if (((test-path "$DBXpath\content.bin") -eq $true) -and ((Test-Path "$DBXpath\signature.p7") -eq $true)) {
            Set-SecureBootUefi -Name dbx -ContentFilePath "$DBXpath\content.bin" -SignedFilePath "$DBXpath\signature.p7" -Time 2010-03-06T19:17:21Z -AppendWrite
        }

    }
}

fix_SercureBoot

cmd.exe /c "echo A | Powershell.exe Set-ExecutionPolicy $SaveExecutionPolicy -Scope Process -Force"


Stop-Transcript